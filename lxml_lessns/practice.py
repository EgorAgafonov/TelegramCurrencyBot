import time
import requests
import lxml.html
from lxml import etree
from bs4 import BeautifulSoup
import easyocr
import sys
import segno
import io
import os
from PIL import Image
from dadata import Dadata
from settings import TOKEN_DADATA
import datetime
import json


# 1 -
# - ?????? ???????? ??????????? HTML-???????? (??????? ??????????? ? ???????? ????? ???????) ? ??????? ????????? lxml:

# html = requests.get("https://www.python.org/").content
# tree = lxml.html.document_fromstring(html)
# title = tree.xpath("//*[@id='dive-into-python']/ul[2]/li[1]/div[2]/p/text()")
# print(title)
#
# # ???????? ?????? ElementTree. ?? ???????????? ???????? parse()
# tree = etree.parse('Welcome to Python.org.html', lxml.html.HTMLParser())  # ?????????? ???????? ??? ???? ? ???????
# # HTML-???????. ??? HTML ? ??? ??, ??? ?? ??????? ? ????????? ? ????? ?? ????????.
#
# ul = tree.findall('/body/div/div[3]/div/section/div[2]/div[1]/div/ul/li')  # ???????? ? ???????? ?????? findall
# # ????????????? xpath. ????? ?? ??????? ??? ???????? ?????? ????????.
#
# for li in ul:
#     a = li.find('a')    # ? ?????? ???????? ???????, ??? ???????? ????????? ???????. ? ??? ??? ??? <a>. ?.?.
#                         # ???????????, ?? ??????? ????? ??????, ????? ??????? ?? ???????? ? ????????. ??????????? ?
#                         # HTML ? ??? ?????? ??? <a>.
#     print(a.text)  # ?? ????? ???? ???????? ????? ? ??? ? ????? ????? ?????????


# 2 -
# - ?????? ???????? ??????????? HTML-???????? (??????? ??????????? ? ???????? ????? ???????) ? ??????? ??????????
# bs4 import BeautifulSoup:

# base = 'https://ru.stackoverflow.com'
# html = requests.get(base).content
# soup = BeautifulSoup(html, 'lxml')
# div_container = soup.find('div', id='question-mini-list')
# a_tag = div_container.findAll('a', class_='s-link')
# file = 'lxml_lessons.txt'
# with open(file, 'w', encoding='windows-1251') as f:
#     for link in a_tag:
#         result = f"\n{link.getText()}\n" + f"\n{base + link.get('href')}\n"
#         f.write(result)
#         print(f"{link.getText()}\n" + f"{base + link.get('href')}\n")


# qrcode_1 = segno.make_qr("https://github.com/EgorAgafonov/TelegramCurrencyBot.git")
# img = qrcode_1.to_pil(scale=25).rotate(45, expand=True)
# img.save("qrcode_scale_30.png", light="lightgreen")


# out = io.BytesIO()
# # Nothing special here, let Segno generate the QR code and save it as PNG in a buffer
# segno.make_qr("https://github.com/EgorAgafonov/TelegramCurrencyBot.git", error='h').save(out, scale=25, kind='png')
# out.seek(0)  # Important to let Pillow load the PNG
# img = Image.open(out)
# img = img.convert('RGB')  # Ensure colors for the output
# img_width, img_height = img.size
# logo_max_size = img_height // 3  # May use a fixed value as well
# logo_img = Image.open('git_hub_logo.png')  # The logo
# # Resize the logo to logo_max_size
# logo_img.thumbnail((logo_max_size, logo_max_size), Image.Resampling.LANCZOS)
# # Calculate the center of the QR code
# box = ((img_width - logo_img.size[0]) // 2, (img_height - logo_img.size[1]) // 2)
# img.paste(logo_img, box)
# img.save('qrcode_with_logo.png')


# def text_recognition(file_path):
#     reader = easyocr.Reader(['ru', "en"])
#     result = reader.readtext(file_path, detail=0, paragraph=True, text_threshold=0.5)
#     return result
#
#
# def main():
#     # file_object = os.path.split("\\chat_images\\test.png")
#     recognized_text = text_recognition(file_path="../chat_images/test.png")
#     # print(recognized_text)
#
#     # 1 - ??????? ??????????? ?????? ??????????? OCR
#     recognized_string = '\n'.join(recognized_text)
#     print(recognized_string)
#     #
#     # # 2 - ??????? ??????????? ?????? ??????????? OCR
#     # for key in recognized_text:
#     #     print(key)


# def find_org_by_name_inn(organization_data):
#     dadata = Dadata(TOKEN_DADATA)
#     response = dadata.suggest('party', organization_data)
#     print(response)
#     metro = response[0].get("data").get("address").get("data").get("metro")
#     if metro is None:
#         metro_check = "нет"
#         metro_dist = "нет"
#     else:
#         metro_check = metro[0].get('name')
#         metro_dist = metro[0].get('distance')
#     result = (f"Полное наимен-ие: <b>{response[0].get('data').get('name').get('full_with_opf')}</b>\n"
#               f"Краткое наимен-ие: <b>{response[0].get('data').get('name').get('short_with_opf')}</b>\n"
#               f"ИНН: <b>{response[0].get('value')}</b>\n"
#               f"КПП: <b>{response[0].get('data').get('kpp')}</b>\n"
#               f"ОГРН: <b>{response[0].get('data').get('ogrn')}</b>\n"
#               f"Дата рег-ии: "
#               f"<b>{datetime.datetime.fromtimestamp(((response[0].get('data').get('state').get('registration_date')) / 1000))}</b>\n"
#               f"ФИО руков-ля(ЕИО): <b>{response[0].get('data').get('management').get('name')}</b>\n"
#               f"Должность руков-ля: <b>{response[0].get('data').get('management').get('post')}</b>\n"
#               f"Статус ЮЛ (действ./не действ.): <b>{response[0].get('data').get('state').get('status')}</b>\n"
#               f"Код налог-ой инсп-ции: <b>{response[0].get('data').get('address').get('data').get('tax_office')}</b>\n"
#               f"Основной ОКВЭД: <b>{response[0].get('data').get('okved')}</b>\n"
#               f"Сведения о лицен-ях: <b>{response[0].get('data').get('licenses')}</b>\n"
#               f"Система налогооб-ия: <b>{response[0].get('data').get('finance').get('tax_system')}</b>\n"
#               f"Адрес госуд-ой рег-ии: <b>{response[0].get('data').get('address').get('value')}</b>\n"
#               f"Ближайшее метро: <b>м. {metro_check}</b>\n"
#               f"Расстояние до метро: <b>{metro_dist}</b>\n")
#     return print(result)
#
#
# if __name__ == "__main__":
#     # main()
#     find_org_by_name_inn(organization_data="Стройгазконсалтинг")

