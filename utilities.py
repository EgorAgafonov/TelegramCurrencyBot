import json
import easyocr
import requests
import segno
from dadata import Dadata
from settings import *
import datetime


class ConvertionException(Exception):
    pass


class CryptoConverter:

    @staticmethod
    def convert(token: str, quantity: str, base_code: str, target_code: str, ) -> object:
        """–ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏(amount) –æ–¥–Ω–æ–π/–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü –±–∞–∑–æ–≤–æ–π
        –≤–∞–ª—é—Ç—ã(base_code) –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç–µ(target_code), —Ç.–µ. —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤
        –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥—Ä—É–≥–æ–π."""

        base_url = "https://v6.exchangerate-api.com/v6/"
        response = requests.get(base_url + token + "pair/" + f"{base_code}/" + f"{target_code}/" + str(quantity))

        status = response.status_code
        result = ""
        try:
            result = response.json()
        except json.JSONDecodeError:
            result = response.text

        try:
            check_1 = float(quantity)
            check_2 = quantity.isdigit()
        except ValueError:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n"
                                      f"–£–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{quantity}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")

        if base_code == target_code:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n–£–∫–∞–∑–∞–Ω—ã –¥–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ "
                                      f"–±—É–∫–≤–µ–Ω–Ω–æ–≥–æ.\n"
                                      f"–õ–æ–≥–∏–∫–∞ –≤—ã—à–ª–∞ –∏–∑ —á–∞—Ç–∞üòú.\n "
                                      f"–í–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '100 USD RUB'")
        try:
            check_1 = keys[base_code]
            check_2 = base_code.isalpha()
        except KeyError:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n"
                                      f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ: "
                                      f"{base_code}.\n")
        try:
            check_1 = keys[target_code]
            check_2 = target_code.isalpha()
        except KeyError:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n"
                                      f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ: "
                                      f"'{target_code}'.\n")

        return status, result


class RequestsToEGRYUL:
    @staticmethod
    def find_org_by_name(organization_data):
        dadata = Dadata(TOKEN_DADATA)
        response = dadata.suggest('party', organization_data)
        metro = response[0]["data"]["address"]["data"]['metro']
        tax_system = response[0]['data']['finance']
        if metro is None:
            metro_check = "–Ω–µ—Ç"
            metro_dist = "–Ω–µ—Ç"
        else:
            metro_check = metro[0]['name']
            metro_dist = metro[0]['distance']
        if tax_system is None:
            tax_check = "—Å–≤–µ–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        else:
            tax_check = tax_system['tax_system']

        full_with_opf = response[0].get('data').get('name').get('full_with_opf')
        short_with_opf = response[0].get('data').get('name').get('short_with_opf')


        result = []

        # result = (f"–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω-–∏–µ: <b>{}</b>\n"
        #           f"–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω-–∏–µ: <b>{}</b>\n"
        #           f"–ò–ù–ù: <b>{response[0].get('data').get('inn')}</b>\n"
        #           f"–ö–ü–ü: <b>{response[0].get('data').get('kpp')}</b>\n"
        #           f"–û–ì–†–ù: <b>{response[0].get('data').get('ogrn')}</b>\n"
        #           f"–î–∞—Ç–∞ —Ä–µ–≥-–∏–∏: "
        #           f"<b>{datetime.datetime.fromtimestamp(((response[0].get('data').get('state').get('registration_date')) / 1000))}</b>\n"
        #           f"–§–ò–û —Ä—É–∫–æ–≤-–ª—è(–ï–ò–û): <b>{response[0].get('data').get('management').get('name')}</b>\n"
        #           f"–î–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤-–ª—è: <b>{response[0].get('data').get('management').get('post')}</b>\n"
        #           f"–°—Ç–∞—Ç—É—Å –Æ–õ (–¥–µ–π—Å—Ç–≤./–Ω–µ –¥–µ–π—Å—Ç–≤.): <b>{response[0].get('data').get('state').get('status')}</b>\n"
        #           f"–ö–æ–¥ –Ω–∞–ª–æ–≥-–æ–π –∏–Ω—Å–ø-—Ü–∏–∏: <b>{response[0].get('data').get('address').get('data').get('tax_office')}</b>\n"
        #           f"–û—Å–Ω–æ–≤–Ω–æ–π –û–ö–í–≠–î: <b>{response[0].get('data').get('okved')}</b>\n"
        #           f"–°–≤–µ–¥–µ–Ω–∏—è –æ –ª–∏—Ü–µ–Ω-—è—Ö: <b>{response[0].get('data').get('licenses')}</b>\n"
        #           f"–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±-–∏—è: <b>{tax_check}</b>\n"
        #           f"–ê–¥—Ä–µ—Å –≥–æ—Å—É–¥-–æ–π —Ä–µ–≥-–∏–∏: <b>{response[0].get('data').get('address').get('value')}</b>\n"
        #           f"–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ: <b>–º. {metro_check}</b>\n"
        #           f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ: <b>{metro_dist}</b>\n")

        return result


class TextImageReader:

    @staticmethod
    def text_recognition(file_path: str, langs: list) -> str:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞(OCR) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç –±–æ—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ, –º–∞—à–∏–Ω–æ–ø–∏—Å–Ω–æ–≥–æ –∫–æ–¥–∞. –í –∞—Ç—Ä–∏–±—É—Ç file_path –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ
        –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. """

        reader = easyocr.Reader(langs)
        recognized_list = reader.readtext(file_path, detail=0, paragraph=True, text_threshold=0.5)
        recognized_string = '\n'.join(recognized_list)
        result = recognized_string.replace("<", "'").replace(">", "'").replace("/", "'")
        return result


class QRcodeMaker:
    @staticmethod
    def make_QR_code(content):
        qrcode = segno.make_qr(content, error='h')
        file_path = "./chat_images/qrcode_scale_25.png"
        qrcode.save(file_path, scale=25, light='lightgreen')
        result = open(file_path, mode="rb")
        return result

