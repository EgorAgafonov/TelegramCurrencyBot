import json
from typing import BinaryIO
import easyocr
import requests
import segno
from dadata import Dadata
from settings import *
import datetime


class ConvertionException(Exception):
    pass


class CryptoConverter:

    @staticmethod
    def convert(token: str, quantity: str, base_code: str, target_code: str, ) -> object:
        """–ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏(amount) –æ–¥–Ω–æ–π/–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü –±–∞–∑–æ–≤–æ–π
        –≤–∞–ª—é—Ç—ã(base_code) –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç–µ(target_code), —Ç.–µ. —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤
        –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥—Ä—É–≥–æ–π."""

        base_url = "https://v6.exchangerate-api.com/v6/"
        response = requests.get(base_url + token + "pair/" + f"{base_code}/" + f"{target_code}/" + str(quantity))

        status = response.status_code
        result = ""
        try:
            result = response.json()
        except json.JSONDecodeError:
            result = response.text

        try:
            check_1 = float(quantity)
            check_2 = quantity.isdigit()
        except ValueError:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n"
                                      f"–£–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{quantity}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")

        if base_code == target_code:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n–£–∫–∞–∑–∞–Ω—ã –¥–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ "
                                      f"–±—É–∫–≤–µ–Ω–Ω–æ–≥–æ.\n"
                                      f"–õ–æ–≥–∏–∫–∞ –≤—ã—à–ª–∞ –∏–∑ —á–∞—Ç–∞üòú.\n "
                                      f"–í–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '100 USD RUB'")
        try:
            check_1 = keys[base_code]
            check_2 = base_code.isalpha()
        except KeyError:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n"
                                      f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ: "
                                      f"{base_code}.\n")
        try:
            check_1 = keys[target_code]
            check_2 = target_code.isalpha()
        except KeyError:
            raise ConvertionException(f"–û—à–∏–±–∫–∞!\n"
                                      f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ: "
                                      f"'{target_code}'.\n")

        return status, result


class RequestsToEGRYUL:

    @staticmethod
    def find_org_by_name(organization_data: str) -> list:
        """ –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ API —Å–∞–π—Ç–∞ https://dadata.ru –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º –ª–∏—Ü–µ
        –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–ï–ì–†–Æ–õ). –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–æ–∫ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–µ–¥–µ–Ω–∏—è–º–∏
        –æ –Æ–õ."""

        dadata = Dadata(TOKEN_DADATA)
        response = dadata.suggest('party', organization_data)
        metro = response[0]["data"]["address"]["data"]['metro']
        tax_system = response[0]['data']['finance']
        if metro is None:
            metro_check = "–Ω–µ—Ç"
            metro_dist = "–Ω–µ—Ç"
        else:
            metro_check = metro[0]['name']
            metro_dist = metro[0]['distance']
        if tax_system is None:
            tax_check = "—Å–≤–µ–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        else:
            tax_check = tax_system['tax_system']

        full_with_opf = response[0]['data']['name']['full_with_opf']
        short_with_opf = response[0]['data']['name']['short_with_opf']
        inn = response[0]['data']['inn']
        kpp = response[0]['data']['kpp']
        ogrn = response[0]['data']['ogrn']
        reg_date = datetime.datetime.fromtimestamp(((response[0]['data']['state']['registration_date']) / 1000))
        heads_name = response[0]['data']['management']['name']
        heads_post = response[0]['data']['management']['post']
        company_status = response[0]['data']['state']['status']
        tax_office_num = response[0]['data']['address']['data']['tax_office']
        main_okved = response[0]['data']['okved']
        licenses = response[0]['data']['licenses']
        tax_system = tax_check
        reg_address = response[0]['data']['address']['value']
        nearest_metro = metro_check
        metro_distance = metro_dist

        result = [full_with_opf, short_with_opf, inn, kpp, ogrn, reg_date, heads_name, heads_post,
                  company_status, tax_office_num, main_okved, licenses, tax_system, reg_address, nearest_metro,
                  metro_distance]

        return result


class TextImageReader:

    @staticmethod
    def text_recognition(file_path: str, langs: list) -> str:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞(OCR) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç –±–æ—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ –º–∞—à–∏–Ω–æ–ø–∏—Å–Ω—ã—Ö, —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –í –∞—Ä–≥—É–º–µ–Ω—Ç file_path –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ
        –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –∞—Ä–≥—É–º–µ–Ω—Ç langs –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤(–∞), —Å–∏–º–≤–æ–ª—ã
        –∫–æ—Ç–æ—Ä—ã—Ö(–æ–≥–æ) —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""

        reader = easyocr.Reader(langs)
        recognized_list = reader.readtext(file_path, detail=0, paragraph=True, text_threshold=0.5)
        recognized_string = '\n'.join(recognized_list)
        result = recognized_string.replace("<", "'").replace(">", "'").replace("/", "'") # –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        # –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ, –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Å—Ç—Ä–æ–∫ –≤ —á–∞—Ç, API Telegram –æ—à–∏–±–æ—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏—Ö –∫–∞–∫ —Ç–µ–≥–∏ /.
        # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ parse_mode='html' —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–∑–æ–≤—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π. –ü–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ,
        # –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –∏ –º–µ–Ω—è–µ—Ç—Å—è (.replace("/", "'") –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ "/".
        return result


class QRcodeMaker:
    @staticmethod
    def make_QR_code(content: str) -> BinaryIO:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ QR-–∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ html-—Å—Å—ã–ª–∫—É –∏–ª–∏
        –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ qr-–∫–æ–¥–∞, —Ö—Ä–∞–Ω—è—â–µ–µ—Å—è –≤
        –±—É—Ñ–µ—Ä–µ –ø–∞–º—è—Ç–∏."""

        qrcode = segno.make_qr(content, error='h')
        file_path = "qrcode_scale_25.png"
        qrcode.save(file_path, scale=25, light='lightgreen')
        result = open(file_path, mode="rb")
        return result

